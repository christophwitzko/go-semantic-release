// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RepositoryProviderPluginClient is the client API for RepositoryProviderPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryProviderPluginClient interface {
	Name(ctx context.Context, in *ProviderName_Request, opts ...grpc.CallOption) (*ProviderName_Response, error)
}

type repositoryProviderPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryProviderPluginClient(cc grpc.ClientConnInterface) RepositoryProviderPluginClient {
	return &repositoryProviderPluginClient{cc}
}

func (c *repositoryProviderPluginClient) Name(ctx context.Context, in *ProviderName_Request, opts ...grpc.CallOption) (*ProviderName_Response, error) {
	out := new(ProviderName_Response)
	err := c.cc.Invoke(ctx, "/RepositoryProviderPlugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryProviderPluginServer is the server API for RepositoryProviderPlugin service.
// All implementations must embed UnimplementedRepositoryProviderPluginServer
// for forward compatibility
type RepositoryProviderPluginServer interface {
	Name(context.Context, *ProviderName_Request) (*ProviderName_Response, error)
	mustEmbedUnimplementedRepositoryProviderPluginServer()
}

// UnimplementedRepositoryProviderPluginServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryProviderPluginServer struct {
}

func (*UnimplementedRepositoryProviderPluginServer) Name(context.Context, *ProviderName_Request) (*ProviderName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (*UnimplementedRepositoryProviderPluginServer) mustEmbedUnimplementedRepositoryProviderPluginServer() {
}

func RegisterRepositoryProviderPluginServer(s *grpc.Server, srv RepositoryProviderPluginServer) {
	s.RegisterService(&_RepositoryProviderPlugin_serviceDesc, srv)
}

func _RepositoryProviderPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryProviderPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepositoryProviderPlugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryProviderPluginServer).Name(ctx, req.(*ProviderName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepositoryProviderPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RepositoryProviderPlugin",
	HandlerType: (*RepositoryProviderPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _RepositoryProviderPlugin_Name_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/provider/provider.proto",
}
