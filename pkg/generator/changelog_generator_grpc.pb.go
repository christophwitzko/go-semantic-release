// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChangelogGeneratorPluginClient is the client API for ChangelogGeneratorPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangelogGeneratorPluginClient interface {
	Generate(ctx context.Context, in *GenerateChangelog_Request, opts ...grpc.CallOption) (*GenerateChangelog_Response, error)
}

type changelogGeneratorPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewChangelogGeneratorPluginClient(cc grpc.ClientConnInterface) ChangelogGeneratorPluginClient {
	return &changelogGeneratorPluginClient{cc}
}

func (c *changelogGeneratorPluginClient) Generate(ctx context.Context, in *GenerateChangelog_Request, opts ...grpc.CallOption) (*GenerateChangelog_Response, error) {
	out := new(GenerateChangelog_Response)
	err := c.cc.Invoke(ctx, "/ChangelogGeneratorPlugin/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangelogGeneratorPluginServer is the server API for ChangelogGeneratorPlugin service.
// All implementations must embed UnimplementedChangelogGeneratorPluginServer
// for forward compatibility
type ChangelogGeneratorPluginServer interface {
	Generate(context.Context, *GenerateChangelog_Request) (*GenerateChangelog_Response, error)
	mustEmbedUnimplementedChangelogGeneratorPluginServer()
}

// UnimplementedChangelogGeneratorPluginServer must be embedded to have forward compatible implementations.
type UnimplementedChangelogGeneratorPluginServer struct {
}

func (*UnimplementedChangelogGeneratorPluginServer) Generate(context.Context, *GenerateChangelog_Request) (*GenerateChangelog_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (*UnimplementedChangelogGeneratorPluginServer) mustEmbedUnimplementedChangelogGeneratorPluginServer() {
}

func RegisterChangelogGeneratorPluginServer(s *grpc.Server, srv ChangelogGeneratorPluginServer) {
	s.RegisterService(&_ChangelogGeneratorPlugin_serviceDesc, srv)
}

func _ChangelogGeneratorPlugin_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateChangelog_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangelogGeneratorPluginServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChangelogGeneratorPlugin/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangelogGeneratorPluginServer).Generate(ctx, req.(*GenerateChangelog_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChangelogGeneratorPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ChangelogGeneratorPlugin",
	HandlerType: (*ChangelogGeneratorPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _ChangelogGeneratorPlugin_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/generator/changelog_generator.proto",
}
