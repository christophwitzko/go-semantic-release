// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package analyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommitAnalyzerPluginClient is the client API for CommitAnalyzerPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitAnalyzerPluginClient interface {
	Analyze(ctx context.Context, in *CommitAnalyzerRequest, opts ...grpc.CallOption) (*CommitAnalyzerResponse, error)
}

type commitAnalyzerPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitAnalyzerPluginClient(cc grpc.ClientConnInterface) CommitAnalyzerPluginClient {
	return &commitAnalyzerPluginClient{cc}
}

func (c *commitAnalyzerPluginClient) Analyze(ctx context.Context, in *CommitAnalyzerRequest, opts ...grpc.CallOption) (*CommitAnalyzerResponse, error) {
	out := new(CommitAnalyzerResponse)
	err := c.cc.Invoke(ctx, "/CommitAnalyzerPlugin/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitAnalyzerPluginServer is the server API for CommitAnalyzerPlugin service.
// All implementations must embed UnimplementedCommitAnalyzerPluginServer
// for forward compatibility
type CommitAnalyzerPluginServer interface {
	Analyze(context.Context, *CommitAnalyzerRequest) (*CommitAnalyzerResponse, error)
	mustEmbedUnimplementedCommitAnalyzerPluginServer()
}

// UnimplementedCommitAnalyzerPluginServer must be embedded to have forward compatible implementations.
type UnimplementedCommitAnalyzerPluginServer struct {
}

func (*UnimplementedCommitAnalyzerPluginServer) Analyze(context.Context, *CommitAnalyzerRequest) (*CommitAnalyzerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (*UnimplementedCommitAnalyzerPluginServer) mustEmbedUnimplementedCommitAnalyzerPluginServer() {}

func RegisterCommitAnalyzerPluginServer(s *grpc.Server, srv CommitAnalyzerPluginServer) {
	s.RegisterService(&_CommitAnalyzerPlugin_serviceDesc, srv)
}

func _CommitAnalyzerPlugin_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitAnalyzerPluginServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommitAnalyzerPlugin/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitAnalyzerPluginServer).Analyze(ctx, req.(*CommitAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommitAnalyzerPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CommitAnalyzerPlugin",
	HandlerType: (*CommitAnalyzerPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _CommitAnalyzerPlugin_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/analyzer/commit_analyzer.proto",
}
