// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package updater

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FilesUpdaterPluginClient is the client API for FilesUpdaterPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesUpdaterPluginClient interface {
	ForFiles(ctx context.Context, in *FilesUpdaterForFiles_Request, opts ...grpc.CallOption) (*FilesUpdaterForFiles_Response, error)
	Apply(ctx context.Context, in *FilesUpdaterApply_Request, opts ...grpc.CallOption) (*FilesUpdaterApply_Response, error)
}

type filesUpdaterPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesUpdaterPluginClient(cc grpc.ClientConnInterface) FilesUpdaterPluginClient {
	return &filesUpdaterPluginClient{cc}
}

func (c *filesUpdaterPluginClient) ForFiles(ctx context.Context, in *FilesUpdaterForFiles_Request, opts ...grpc.CallOption) (*FilesUpdaterForFiles_Response, error) {
	out := new(FilesUpdaterForFiles_Response)
	err := c.cc.Invoke(ctx, "/FilesUpdaterPlugin/ForFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesUpdaterPluginClient) Apply(ctx context.Context, in *FilesUpdaterApply_Request, opts ...grpc.CallOption) (*FilesUpdaterApply_Response, error) {
	out := new(FilesUpdaterApply_Response)
	err := c.cc.Invoke(ctx, "/FilesUpdaterPlugin/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesUpdaterPluginServer is the server API for FilesUpdaterPlugin service.
// All implementations must embed UnimplementedFilesUpdaterPluginServer
// for forward compatibility
type FilesUpdaterPluginServer interface {
	ForFiles(context.Context, *FilesUpdaterForFiles_Request) (*FilesUpdaterForFiles_Response, error)
	Apply(context.Context, *FilesUpdaterApply_Request) (*FilesUpdaterApply_Response, error)
	mustEmbedUnimplementedFilesUpdaterPluginServer()
}

// UnimplementedFilesUpdaterPluginServer must be embedded to have forward compatible implementations.
type UnimplementedFilesUpdaterPluginServer struct {
}

func (*UnimplementedFilesUpdaterPluginServer) ForFiles(context.Context, *FilesUpdaterForFiles_Request) (*FilesUpdaterForFiles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForFiles not implemented")
}
func (*UnimplementedFilesUpdaterPluginServer) Apply(context.Context, *FilesUpdaterApply_Request) (*FilesUpdaterApply_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedFilesUpdaterPluginServer) mustEmbedUnimplementedFilesUpdaterPluginServer() {}

func RegisterFilesUpdaterPluginServer(s *grpc.Server, srv FilesUpdaterPluginServer) {
	s.RegisterService(&_FilesUpdaterPlugin_serviceDesc, srv)
}

func _FilesUpdaterPlugin_ForFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesUpdaterForFiles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesUpdaterPluginServer).ForFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilesUpdaterPlugin/ForFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesUpdaterPluginServer).ForFiles(ctx, req.(*FilesUpdaterForFiles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesUpdaterPlugin_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesUpdaterApply_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesUpdaterPluginServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilesUpdaterPlugin/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesUpdaterPluginServer).Apply(ctx, req.(*FilesUpdaterApply_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilesUpdaterPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FilesUpdaterPlugin",
	HandlerType: (*FilesUpdaterPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForFiles",
			Handler:    _FilesUpdaterPlugin_ForFiles_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _FilesUpdaterPlugin_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/updater/updater.proto",
}
